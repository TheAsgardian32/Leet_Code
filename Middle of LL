Two Pointer approach
1.Initialize fast and slow pointers on head;
2.Move the slow pointer one step and fast pointer two steps simult.
3.When the fast reaches null or next null then the slow reaches middle elem.



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) 
    {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null &&fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}
